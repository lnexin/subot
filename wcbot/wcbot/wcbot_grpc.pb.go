// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: wcbot.proto

package wcbot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Wcbot_Ping_FullMethodName = "/wcbot.Wcbot/Ping"
)

// WcbotClient is the client API for Wcbot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WcbotClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type wcbotClient struct {
	cc grpc.ClientConnInterface
}

func NewWcbotClient(cc grpc.ClientConnInterface) WcbotClient {
	return &wcbotClient{cc}
}

func (c *wcbotClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Wcbot_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WcbotServer is the server API for Wcbot service.
// All implementations must embed UnimplementedWcbotServer
// for forward compatibility
type WcbotServer interface {
	Ping(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedWcbotServer()
}

// UnimplementedWcbotServer must be embedded to have forward compatible implementations.
type UnimplementedWcbotServer struct {
}

func (UnimplementedWcbotServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedWcbotServer) mustEmbedUnimplementedWcbotServer() {}

// UnsafeWcbotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WcbotServer will
// result in compilation errors.
type UnsafeWcbotServer interface {
	mustEmbedUnimplementedWcbotServer()
}

func RegisterWcbotServer(s grpc.ServiceRegistrar, srv WcbotServer) {
	s.RegisterService(&Wcbot_ServiceDesc, srv)
}

func _Wcbot_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WcbotServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wcbot_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WcbotServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Wcbot_ServiceDesc is the grpc.ServiceDesc for Wcbot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wcbot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wcbot.Wcbot",
	HandlerType: (*WcbotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Wcbot_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wcbot.proto",
}
